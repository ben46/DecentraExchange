/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBoringERC20,
  MockBoringERC20Interface,
} from "../MockBoringERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "safeDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "safeName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "safeSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610fe4380380610fe48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610f50806100946000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630ac5ad5914610067578063423f6cef146100ea57806342842e0e146101385780634e082382146101a657806384703ede14610229578063fc0c546a1461024a575b600080fd5b61006f61027e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101366004803603604081101561010057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506102c4565b005b6101a46004803603606081101561014e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610313565b005b6101ae610365565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ee5780820151818401526020810190506101d3565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102316103ab565b604051808260ff16815260200191505060405180910390f35b6102526103f1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60606102bf60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610415565b905090565b61030f828260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661058d9092919063ffffffff16565b5050565b61036083838360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661078f909392919063ffffffff16565b505050565b60606103a660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109b0565b905090565b60006103ec60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b28565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060608373ffffffffffffffffffffffffffffffffffffffff166395d89b4160e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106104d057805182526020820191506020810190506020830392506104ad565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610530576040519150601f19603f3d011682016040523d82523d6000602084013e610535565b606091505b50915091508161057a576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250610584565b61058381610c95565b5b92505050919050565b600060608473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061066f578051825260208201915060208101905060208303925061064c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106d1576040519150601f19603f3d011682016040523d82523d6000602084013e6106d6565b606091505b50915091508180156107165750600081511480610715575080806020019051602081101561070357600080fd5b81019080805190602001909291905050505b5b610788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f426f72696e6745524332303a205472616e73666572206661696c65640000000081525060200191505060405180910390fd5b5050505050565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061088f578051825260208201915060208101905060208303925061086c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146108f1576040519150601f19603f3d011682016040523d82523d6000602084013e6108f6565b606091505b50915091508180156109365750600081511480610935575080806020019051602081101561092357600080fd5b81019080805190602001909291905050505b5b6109a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f426f72696e6745524332303a205472616e7366657246726f6d206661696c656481525060200191505060405180910390fd5b505050505050565b6060600060608373ffffffffffffffffffffffffffffffffffffffff166306fdde0360e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610a6b5780518252602082019150602081019050602083039250610a48565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b509150915081610b15576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250610b1f565b610b1e81610c95565b5b92505050919050565b60008060608373ffffffffffffffffffffffffffffffffffffffff1663313ce56760e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610be25780518252602082019150602081019050602083039250610bbf565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610c42576040519150601f19603f3d011682016040523d82523d6000602084013e610c47565b606091505b5091509150818015610c5a575060208151145b610c65576012610c8c565b808060200190516020811015610c7a57600080fd5b81019080805190602001909291905050505b92505050919050565b60606040825110610d7757818060200190516020811015610cb557600080fd5b8101908080516040519392919084640100000000821115610cd557600080fd5b83820191506020820185811115610ceb57600080fd5b8251866001820283011164010000000082111715610d0857600080fd5b8083526020830192505050908051906020019080838360005b83811015610d3c578082015181840152602081019050610d21565b50505050905090810190601f168015610d695780820380516001836020036101000a031916815260200191505b506040525050509050610f3e565b602082511415610f055760005b60208160ff16108015610dd65750600060f81b838260ff1681518110610da657fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15610de8578080600101915050610d84565b60608160ff1667ffffffffffffffff81118015610e0457600080fd5b506040519080825280601f01601f191660200182016040528015610e375781602001600182028036833780820191505090505b509050600091505b60208260ff16108015610e915750600060f81b848360ff1681518110610e6157fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15610efb57838260ff1681518110610ea557fe5b602001015160f81c60f81b818360ff1681518110610ebf57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050610e3f565b8092505050610f3e565b6040518060400160405280600381526020017f3f3f3f000000000000000000000000000000000000000000000000000000000081525090505b91905056fea164736f6c634300060c000a";

export class MockBoringERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBoringERC20> {
    return super.deploy(token_, overrides || {}) as Promise<MockBoringERC20>;
  }
  getDeployTransaction(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token_, overrides || {});
  }
  attach(address: string): MockBoringERC20 {
    return super.attach(address) as MockBoringERC20;
  }
  connect(signer: Signer): MockBoringERC20__factory {
    return super.connect(signer) as MockBoringERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBoringERC20Interface {
    return new utils.Interface(_abi) as MockBoringERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBoringERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockBoringERC20;
  }
}
