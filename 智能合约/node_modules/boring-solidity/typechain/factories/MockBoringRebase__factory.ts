/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBoringRebase,
  MockBoringRebaseInterface,
} from "../MockBoringRebase";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    name: "add2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    name: "addElastic",
    outputs: [
      {
        internalType: "uint256",
        name: "newElastic",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    name: "sub2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    name: "subElastic",
    outputs: [
      {
        internalType: "uint256",
        name: "newElastic",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "toBase",
    outputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "toElastic",
    outputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "total",
    outputs: [
      {
        internalType: "uint128",
        name: "elastic",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "base",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506115b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638edae17d116100665780638edae17d146101ec578063a7d4ed1f1461023a578063b9ce6c7b14610288578063ebd58975146102ca578063f820bfd8146103025761009e565b80631ab06ee5146100a357806329fcda33146100db5780632c4bcd06146101135780632ddbd13a146101555780635c7d9f381461019e575b600080fd5b6100d9600480360360408110156100b957600080fd5b810190808035906020019092919080359060200190929190505050610350565b005b610111600480360360408110156100f157600080fd5b8101908080359060200190929190803590602001909291905050506103da565b005b61013f6004803603602081101561012957600080fd5b8101908080359060200190929190505050610515565b6040518082815260200191505060405180910390f35b61015d6105a8565b60405180836fffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6101d6600480360360408110156101b457600080fd5b81019080803590602001909291908035151590602001909291905050506105f2565b6040518082815260200191505060405180910390f35b6102246004803603604081101561020257600080fd5b81019080803590602001909291908035151590602001909291905050506106b1565b6040518082815260200191505060405180910390f35b6102726004803603604081101561025057600080fd5b81019080803590602001909291908035151590602001909291905050506107fa565b6040518082815260200191505060405180910390f35b6102b46004803603602081101561029e57600080fd5b8101908080359060200190929190505050610943565b6040518082815260200191505060405180910390f35b610300600480360360408110156102e057600080fd5b8101908080359060200190929190803590602001909291905050506109d6565b005b61033a6004803603604081101561031857600080fd5b8101908080359060200190929190803515159060200190929190505050610b11565b6040518082815260200191505060405180910390f35b61035982610bd0565b6000800160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061039c81610bd0565b6000800160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050565b61048f828260006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050610c829092919063ffffffff16565b6000808201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505050565b600061052b826000610d5490919063ffffffff16565b9050606e81146105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4d6f636b426f72696e675265626173653a2074657374206661696c656400000081525060200191505060405180910390fd5b919050565b60008060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60006106a9838360006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050610df69092919063ffffffff16565b905092915050565b6000610768838360006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050610edf9092919063ffffffff16565b6000808294508391905060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050505092915050565b60006108b1838360006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050610fc19092919063ffffffff16565b6000808294508391905060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050505092915050565b60006109598260006110a390919063ffffffff16565b9050609681146109d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4d6f636b426f72696e675265626173653a2074657374206661696c656400000081525060200191505060405180910390fd5b919050565b610a8b828260006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250506111459092919063ffffffff16565b6000808201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505050565b6000610bc8838360006040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250506112179092919063ffffffff16565b905092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff16821115610c7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f426f72696e674d6174683a2075696e74313238204f766572666c6f770000000081525060200191505060405180910390fd5b819050919050565b610c8a611566565b610cbb610c9684610bd0565b85600001516fffffffffffffffffffffffffffffffff1661130090919063ffffffff16565b84600001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050610d1b610cf683610bd0565b85602001516fffffffffffffffffffffffffffffffff1661130090919063ffffffff16565b84602001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508390509392505050565b6000610da3610d6283610bd0565b8460000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166113a790919063ffffffff16565b8360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff16905092915050565b60008084600001516fffffffffffffffffffffffffffffffff161415610e1e57829050610ed8565b83600001516fffffffffffffffffffffffffffffffff16610e5e85602001516fffffffffffffffffffffffffffffffff168561144e90919063ffffffff16565b81610e6557fe5b049050818015610ebb57508284602001516fffffffffffffffffffffffffffffffff16610eb186600001516fffffffffffffffffffffffffffffffff168461144e90919063ffffffff16565b81610eb857fe5b04105b15610ed757610ed46001826114e390919063ffffffff16565b90505b5b9392505050565b610ee7611566565b6000610ef4858585611217565b9050610f27610f0282610bd0565b86600001516fffffffffffffffffffffffffffffffff166113a790919063ffffffff16565b85600001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050610f87610f6285610bd0565b86602001516fffffffffffffffffffffffffffffffff166113a790919063ffffffff16565b85602001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050849150935093915050565b610fc9611566565b6000610fd6858585610df6565b9050611009610fe485610bd0565b86600001516fffffffffffffffffffffffffffffffff1661130090919063ffffffff16565b85600001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505061106961104482610bd0565b86602001516fffffffffffffffffffffffffffffffff1661130090919063ffffffff16565b85602001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050849150935093915050565b60006110f26110b183610bd0565b8460000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1661130090919063ffffffff16565b8360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff16905092915050565b61114d611566565b61117e61115984610bd0565b85600001516fffffffffffffffffffffffffffffffff166113a790919063ffffffff16565b84600001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250506111de6111b983610bd0565b85602001516fffffffffffffffffffffffffffffffff166113a790919063ffffffff16565b84602001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508390509392505050565b60008084602001516fffffffffffffffffffffffffffffffff16141561123f578290506112f9565b83602001516fffffffffffffffffffffffffffffffff1661127f85600001516fffffffffffffffffffffffffffffffff168561144e90919063ffffffff16565b8161128657fe5b0490508180156112dc57508284600001516fffffffffffffffffffffffffffffffff166112d286602001516fffffffffffffffffffffffffffffffff168461144e90919063ffffffff16565b816112d957fe5b04105b156112f8576112f56001826114e390919063ffffffff16565b90505b5b9392505050565b6000816fffffffffffffffffffffffffffffffff168284019150816fffffffffffffffffffffffffffffffff1610156113a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f426f72696e674d6174683a20416464204f766572666c6f77000000000000000081525060200191505060405180910390fd5b92915050565b6000826fffffffffffffffffffffffffffffffff168284039150816fffffffffffffffffffffffffffffffff161115611448576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f426f72696e674d6174683a20556e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b60008082148061146b575082828385029250828161146857fe5b04145b6114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f426f72696e674d6174683a204d756c204f766572666c6f77000000000000000081525060200191505060405180910390fd5b92915050565b6000818284019150811015611560576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f426f72696e674d6174683a20416464204f766572666c6f77000000000000000081525060200191505060405180910390fd5b92915050565b604051806040016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152509056fea164736f6c634300060c000a";

export class MockBoringRebase__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBoringRebase> {
    return super.deploy(overrides || {}) as Promise<MockBoringRebase>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBoringRebase {
    return super.attach(address) as MockBoringRebase;
  }
  connect(signer: Signer): MockBoringRebase__factory {
    return super.connect(signer) as MockBoringRebase__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBoringRebaseInterface {
    return new utils.Interface(_abi) as MockBoringRebaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBoringRebase {
    return new Contract(address, _abi, signerOrProvider) as MockBoringRebase;
  }
}
