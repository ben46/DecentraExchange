/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringCooker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringCooker__factory>;
    getContractFactory(
      name: "CookTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CookTarget__factory>;
    getContractFactory(
      name: "BoringFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringFactory__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "Domain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Domain__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Data",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Data__factory>;
    getContractFactory(
      name: "ERC20WithSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithSupply__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterContract__factory>;
    getContractFactory(
      name: "MockBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoringBatchable__factory>;
    getContractFactory(
      name: "MockBoringERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoringERC20__factory>;
    getContractFactory(
      name: "MockBoringMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoringMath__factory>;
    getContractFactory(
      name: "MockBoringRebase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoringRebase__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMasterContract__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
